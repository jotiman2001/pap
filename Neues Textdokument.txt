from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time

driver = webdriver.Firefox()
delay=2
driver.get("https://www.govos-test.de/govos-test/go/a/288")
assert "Optionale Registrierung"   in driver.page_source
print(driver.title,driver.current_url)

elem = driver.find_element_by_id("h2id0") # no register
elem.click()
time.sleep(delay)


elem = driver.find_element_by_class_name("jp-button") # weiter button
elem.click()
time.sleep(delay)
print(driver.title,driver.current_url)

elem = driver.find_element_by_xpath("//a[@class='icon jp-button']") # assi starten
elem.click()
time.sleep(delay)
print(driver.title,driver.current_url)

elem = driver.find_element_by_xpath("//*[@id='h2id0']") # radio antragtyp
elem.click()
time.sleep(delay)


elem = driver.find_element_by_xpath("//*[@id='h2id5']") # radio natürl pers
elem.click()
time.sleep(delay)


elem = driver.find_element_by_xpath("//input[@value='weiter >']") # weiter button
elem.click()
time.sleep(delay)
print(driver.title,driver.current_url)

elem = driver.find_element_by_xpath("//input[@name='f2']") # radio natürl pers
elem.send_keys("alejandro")
time.sleep(delay)



elem = driver.find_element_by_xpath("//input[@value='< zurück']") # zurück button
elem.click()
time.sleep(delay)
print(driver.title,driver.current_url)


time.sleep(2)
driver.close()


# import unittest
# from selenium import webdriver
# from selenium.webdriver.common.keys import Keys
# class PythonOrgSearch(unittest.TestCase):
#     def setUp(self):
#         self.driver = webdriver.Firefox()
#     def test_search_in_python_org(self):
#         driver = self.driver
#         driver.get("http://www.python.org")
#         self.assertIn("Python", driver.title)
#         elem = driver.find_element_by_name("q")
#         elem.send_keys("pycon")
#         elem.send_keys(Keys.RETURN)
#         assert "No results found." not in driver.page_source
#     def tearDown(self):
#         self.driver.close()
# if __name__ == "__main__":
#     unittest.main()


# import unittest
#
# class TestStringMethods(unittest.TestCase):
#
#     def test_upper(self):
#         self.assertEqual('foo'.upper(), 'FOO')
#
#     def test_isupper(self):
#         self.assertTrue('FOO'.isupper())
#         self.assertFalse('Foo'.isupper())
#
#     def test_split(self):
#         s = 'hello world'
#         self.assertEqual(s.split(), ['hello', 'world'])
#         # check that s.split fails when the separator is not a string
#         with self.assertRaises(TypeError):
#             s.split(2)
#
# if __name__ == '__main__':
#     unittest.main()

